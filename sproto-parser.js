/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Sproto: peg$parseSproto },
      peg$startRuleFunction  = peg$parseSproto,

      peg$c0 = function(bodyList) {
          let schema = {
              types: [],
              typeByName: {},
              protocols: [],
              protocolByName: {},
          };

          buildSchema(schema, bodyList);

          for (let typeObj of schema.types){
              for (let fieldObj of typeObj.fields) {
                  if (!fieldObj.isBaseType){
                      let refTypeObj = searchTypeObj(schema, typeObj, fieldObj.type);
                      if (refTypeObj){
                          fieldObj.type = refTypeObj.name;
                          // TODO: 暂时不生成refTypeObj, 有需要再说
                          // fieldObj.refTypeObj = refTypeObj;
                      }
                  }
              }
          }
          for (let protocolObj of schema.protocols) {
              if (protocolObj.request && protocolObj.request._flag != 'nil'){
                  let refTypeObj = searchTypeObj(schema, protocolObj, protocolObj.request.type);
                  protocolObj.request.type = refTypeObj.name;
                  if (protocolObj.request._flag == 'Struct'){
                      for (let fieldObj of protocolObj.request.fields){
                          if (!fieldObj.isBaseType){
                              let refTypeObj1 = searchTypeObj(schema, protocolObj, fieldObj.type);
                              fieldObj.type = refTypeObj1.name;
                          }
                      }
                  }
                  
              }
              if (protocolObj.response && protocolObj.response._flag != 'nil'){
                  let refTypeObj = searchTypeObj(schema, protocolObj, protocolObj.response.type);
                  protocolObj.response.type = refTypeObj.name;
                  if (protocolObj.response._flag == 'Struct'){
                      for (let fieldObj of protocolObj.response.fields){
                          if (!fieldObj.isBaseType){
                          let refTypeObj1 = searchTypeObj(schema, protocolObj, fieldObj.type);
                              fieldObj.type = refTypeObj1.name;
                          }
                      }
                  }
              }
          }

          delSchemaKey(schema, ['_flag', '_bodyType', 'isBaseType', "subTypes"]);

          return schema;
      },
      peg$c1 = function(body) {
          // console.log('SprotoBody: ', JSON.stringify(body, null, 2));
          return body;
      },
      peg$c2 = ".",
      peg$c3 = peg$literalExpectation(".", false),
      peg$c4 = function(name, typeBody) {
          let typeInfo = {
              _bodyType : 'Type',
              _flag : typeBody._flag,
              name: name,
              fields: [],
              subTypes: []
          }
          for (let field of typeBody.body){
              if (field._flag === 'Field'){
                  typeInfo.fields.push(field);
              } else if (field._flag === 'Struct'){
                  typeInfo.subTypes.push(field);
              }
          }
          return typeInfo;
      },
      peg$c5 = "{",
      peg$c6 = peg$literalExpectation("{", false),
      peg$c7 = "}",
      peg$c8 = peg$literalExpectation("}", false),
      peg$c9 = function(body) {
          return {
              _flag: 'Struct',
              body: body
          }
      },
      peg$c10 = function(field) {
          return field;
      },
      peg$c11 = ":",
      peg$c12 = peg$literalExpectation(":", false),
      peg$c13 = "*",
      peg$c14 = peg$literalExpectation("*", false),
      peg$c15 = function(name, tag, array, type, extra) {
          let field = {
              _flag: 'Field',
              name: name,
              tag: tag,
              type: type,
          }
          // console.log("fileld name:", name, "array:", array, "extra:", extra);
          if (array){
              field.array = true;
              if (typeof extra == 'number'){
                  field.decimal = extra;
              } else if (typeof extra == 'string'){
                  if (extra == ''){
                      field.map = true;
                  } else {
                      field.key = extra;
                  }
              }
          }
          if (baseTypes.includes(type)){
              field.isBaseType = true;
          }
          return field;
      },
      peg$c16 = "integer",
      peg$c17 = peg$literalExpectation("integer", false),
      peg$c18 = "string",
      peg$c19 = peg$literalExpectation("string", false),
      peg$c20 = "boolean",
      peg$c21 = peg$literalExpectation("boolean", false),
      peg$c22 = "double",
      peg$c23 = peg$literalExpectation("double", false),
      peg$c24 = "binary",
      peg$c25 = peg$literalExpectation("binary", false),
      peg$c26 = function(type) {
          return type;
      },
      peg$c27 = function(name) {
          return name;
      },
      peg$c28 = "#",
      peg$c29 = peg$literalExpectation("#", false),
      peg$c30 = function() {
          return text();
      },
      peg$c31 = function(name, tag, struct) {
          let protocolInfo = {
              _bodyType : 'Protocol',
              name : name,
              tag : tag,
          }
          // console.log('Protocol: ', JSON.stringify(struct, null, 2));
          for (let item of struct){
              if (item.name === 'request'){
                  protocolInfo.request = item;
              } else if (item.name == "response"){
                  protocolInfo.response = item;
              }
          }

          return protocolInfo
      },
      peg$c32 = function(body) {
          return body;
      },
      peg$c33 = "request",
      peg$c34 = peg$literalExpectation("request", false),
      peg$c35 = "nil",
      peg$c36 = peg$literalExpectation("nil", false),
      peg$c37 = function(requestBody) {
          // console.log('requestBody: ', JSON.stringify(requestBody, null, 2));
          if (typeof requestBody === 'string'){
              if (requestBody === 'nil'){
                  return {
                      _flag : 'nil',
                      name : 'request',
                      type : 'nil',
                  }
              } else {
                  return {
                      _flag : 'TypeName',
                      name : 'request',
                      type : requestBody
                  }
              }
          } else {
              return {
                  _flag: requestBody._flag,
                  name: "request",
                  type: "Request",
                  fields: requestBody.body,
              };
          }
          
      },
      peg$c38 = "response",
      peg$c39 = peg$literalExpectation("response", false),
      peg$c40 = function(responseBody) {
          // console.log('responseBody: ', responseBody);
          if (typeof responseBody === 'string'){
              if (responseBody === 'nil'){
                  return {
                      _flag : 'nil',
                      name : 'response',
                      type : "nil",
                  }
              } else {
                  return {
                      _flag : 'TypeName',
                      name : 'response',
                      type : responseBody
                  }
              }
          } else {
              return {
                  _flag : responseBody._flag,
                  name : "response",
                  type : "Response",
                  fields: responseBody.body,
              };
          }
      },
      peg$c41 = peg$anyExpectation(),
      peg$c42 = /^[a-zA-Z_]/,
      peg$c43 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c44 = /^[a-zA-Z0-9_]/,
      peg$c45 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
      peg$c46 = /^[0-9]/,
      peg$c47 = peg$classExpectation([["0", "9"]], false, false),
      peg$c48 = function(digits) {
          return parseInt(text(), 10);
      },
      peg$c49 = function(tag) {
          return parseInt(text(), 10);
      },
      peg$c50 = "(",
      peg$c51 = peg$literalExpectation("(", false),
      peg$c52 = ")",
      peg$c53 = peg$literalExpectation(")", false),
      peg$c54 = function(mainkey) {
          if (mainkey){
              return mainkey;
          }
          return '';
      },
      peg$c55 = function(tag) {
          return tag;
      },
      peg$c56 = /^[ \t\x0B\f\xA0\uFEFF]/,
      peg$c57 = peg$classExpectation([" ", "\t", "\x0B", "\f", "\xA0", "\uFEFF"], false, false),
      peg$c58 = "\r\n",
      peg$c59 = peg$literalExpectation("\r\n", false),
      peg$c60 = "\n",
      peg$c61 = peg$literalExpectation("\n", false),
      peg$c62 = "\r",
      peg$c63 = peg$literalExpectation("\r", false),
      peg$c64 = "\u2028",
      peg$c65 = peg$literalExpectation("\u2028", false),
      peg$c66 = "\u2029",
      peg$c67 = peg$literalExpectation("\u2029", false),
      peg$c68 = /^[\n\r\u2028\u2029]/,
      peg$c69 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseSproto() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseblank0();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSprotoBody();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSprotoBody();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblank0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSprotoBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseblank0();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseType();
      if (s2 === peg$FAILED) {
        s2 = peg$parseProtocol();
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblank0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTypeName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblank0();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStruct();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStruct() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseStructBody();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseStructBody();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c7;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseblank0();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseField();
      if (s2 === peg$FAILED) {
        s2 = peg$parseType();
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblank0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseTypeName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblanks();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s5 = peg$c11;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseblank0();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseFieldType();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseMainkey();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseDecimal();
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c15(s1, s3, s7, s8, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFieldType() {
    var s0;

    s0 = peg$parseBaseType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUserType();
    }

    return s0;
  }

  function peg$parseBaseType() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c20) {
          s1 = peg$c20;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c24) {
              s1 = peg$c24;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUserType() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTypeName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c27(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c28;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLineTerminatorSequence();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseSourceCharacter();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocol() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTypeName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTag();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseProtocolStruct();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocolStruct() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseProtocolStructBody();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseProtocolStructBody();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c7;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocolStructBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseblank0();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRequestBody();
      if (s2 === peg$FAILED) {
        s2 = peg$parseResponseBody();
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblank0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRequestBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseStruct();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTypeName();
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c35) {
              s3 = peg$c35;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResponseBody() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseStruct();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTypeName();
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c35) {
              s3 = peg$c35;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceCharacter() {
    var s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parseAlpha() {
    var s0;

    if (peg$c42.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    return s0;
  }

  function peg$parseAlphaNum() {
    var s0;

    if (peg$c44.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }

    return s0;
  }

  function peg$parseWord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAlpha();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseAlphaNum();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseAlphaNum();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeName() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWord();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseWord();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c2;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWord();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c46.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c46.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTag() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c46.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c46.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMainkey() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWord();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c52;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDecimal() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblank0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTag();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseblank0();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c52;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c55(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhiteSpace() {
    var s0;

    if (peg$c56.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c58) {
      s0 = peg$c58;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c60;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c62;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c64;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c66;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLineTerminator() {
    var s0;

    if (peg$c68.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  function peg$parseblank() {
    var s0;

    s0 = peg$parseWhiteSpace();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLineTerminatorSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$parseComment();
      }
    }

    return s0;
  }

  function peg$parseblank0() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseblank();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseblank();
    }

    return s0;
  }

  function peg$parseblanks() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseblank();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseblank();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }


      const baseTypes = ['integer', 'string', 'boolean', 'double', 'binary'];

      function splitStringFromEnd(str) {
          if (typeof str !== 'string') {
              throw new Error('输入必须为字符串');
          }
          
          if (str.length === 0) {
              return [];
          }
          
          const parts = str.split('.');
          
          // 处理没有点号的情况
          if (parts.length === 1) {
              return [str];
          }
          
          return parts.map((_, index) => parts.slice(0, parts.length - index).join('.'));
      }

      function buildSchema(schema, data, parentName = ''){
          if (!data || typeof data !== 'object') return schema.types;
          
          if (Array.isArray(data)) {
              return data.forEach(item => buildSchema(schema, item, parentName));
          }
          if (data._bodyType == 'Type'){
              if (data._flag === 'Struct' && data.name) {
                  const fullName = parentName ? `${parentName}.${data.name}` : data.name;
                  data.name = fullName;
                  schema.types.push(data);
                  schema.typeByName[fullName] = data;
                  if (Array.isArray(data.subTypes)) {
                      buildSchema(schema, data.subTypes, fullName);
                  }
              }
          } else if (data._bodyType == 'Protocol'){
              if (data.request && data.request._flag == 'Struct'){
                  const fullName = parentName ? `${parentName}.${data.name}.${data.request.type}` : `${data.name}.${data.request.type}`;
                  data.request.name = fullName;
                  schema.types.push(data.request);
                  schema.typeByName[fullName] = data.request;
              }
              if (data.response && data.response._flag == 'Struct'){
                  const fullName = parentName ? `${parentName}.${data.name}.${data.response.type}` : `${data.name}.${data.response.type}`;
                  data.response.name = fullName;
                  schema.types.push(data.response);
                  schema.typeByName[fullName] = data.response;
              }
              const fullName = parentName ? `${parentName}.${data.name}` : data.name;
              data.name = fullName;
              schema.protocols.push(data);
              schema.protocolByName[fullName] = data;
          }
      }

      function searchTypeObj(schema, typeObj, filedName){
          let nameArray = splitStringFromEnd(typeObj.name);
          nameArray.push('');
          for (let str of nameArray){
              let refTypeName = filedName;
              if (str != ''){
                  refTypeName = str + '.' + filedName;
              }
              const refTypeObj = schema.typeByName[refTypeName];
              if (refTypeObj) {
                  return refTypeObj;
              }
          }
          throw Error(`${filedName} not found`);
      }

      function delSchemaKey(schema, keys){
          for (let key of keys){
              for(let typeObj of schema.types){
                  if (typeObj[key] != null){
                      delete typeObj[key];
                  }
                  for (let fieldObj of typeObj.fields){
                      if (fieldObj[key] != null){
                          delete fieldObj[key];
                      }
                  }
              }
              for (let protocolObj of schema.protocols){
                  if (protocolObj[key] != null){
                      delete protocolObj[key];
                  }
                  if (protocolObj.request != null && protocolObj.request[key] != null){
                      delete protocolObj.request[key];
                  }
                  if (protocolObj.response != null && protocolObj.response[key] != null){
                      delete protocolObj.response[key];
                  }
                  if (protocolObj.request != null && Array.isArray(protocolObj.request.fields)){
                      for (let fieldObj of protocolObj.request.fields){
                          if (fieldObj[key] != null){
                              delete fieldObj[key];
                          }
                      }
                  }
                  if (protocolObj.response != null && Array.isArray(protocolObj.response.fields)){
                      for (let fieldObj of protocolObj.response.fields){
                          if (fieldObj[key] != null){
                              delete fieldObj[key];
                          }
                      }
                  }
              }
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
